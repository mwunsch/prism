#!/usr/bin/env ruby
## Prism: Microformat parser and HTML toolkit.
##
## Usage: prism [ OPTION ] [ SOURCE ]
##
## Find the Microformats in the given SOURCE. SOURCE can be a URL
## or a string of HTML. If no Microformat is specified in UFORMAT,
## prism will just print a list of what has been found.
##
## If a Microformat is specified, Prism will convert it into a
## more suitable format. eg. hCard becomes a vCard.
##
## If no SOURCE is given, prism will read from the Standard Input.
##
## Microformats:
##    --atom,  --atom           hAtom => atom feed
##    --vcard, --hcard          hCard => vCard converter
##    --xfn                     Get XFN URLs
##
## Other Options:
##    -h, --help                show this help message
##    -v, --version             version of Prism
##
## Learn more about Microformats at http://microformats.org
##
##

require 'optparse'

def usage
  File.readlines(__FILE__).
  grep(/^##.*/).
  map { |line| line.chomp[3..-1] }.
  join("\n")
end

begin
  require 'nokogiri'
rescue LoadError
  if !defined?(Gem)
    warn "warn: #{$!.to_s}. trying again with bundler."
    require File.expand_path('../../.bundle/environment', __FILE__)
    retry
  end
end

begin
  require 'prism'
rescue LoadError
  raise if $!.to_s !~ /prism/
  libdir = File.expand_path("../../lib", __FILE__).sub(/^#{Dir.pwd}/, '.')
  if !$:.include?(libdir)
    warn "warn: #{$!.to_s}. trying again with #{libdir} on load path."
    $:.unshift libdir
    retry
  end
  raise
end

options = {}
ARGV.options do |option|
  option.banner = "Hi."
  option.on('--atom','--atom') { options[:atom] = true }
  option.on('--hcard','--vcard') { options[:vcard] = true }
  option.on('--xfn') { options[:xfn] = true }
  option.on_tail('-h','--help') { puts usage ; exit }
  option.on_tail('-v','--version') { puts Prism::VERSION ; exit }
  option.parse!
end

if ARGV.empty? && STDIN.tty?
  puts usage
  exit
end

def uformat_counts(group)
  uf_count = Prism::Microformat.microformats.values.collect do |uformat|
    klass = Prism::Microformat.format_to_class(uformat)
    name = "#{klass::FRIENDLY_NAME}"
    found = group.select {|format| format.is_a?(klass) }.count
    if found > 0
      name += "s" if found > 1
      "Found #{found} #{name} in the document. Read more at: #{klass::WIKI_URL}"
    end
  end.compact
  if !uf_count.empty?
    uf_count
  else
    puts "No microformats found in this document." ; exit
  end
end

def parse_microformats(doc, type)
  uformats = Prism.find(doc, type)
  if uformats
    if uformats.respond_to?(:length)
      uformats.each {|uf| yield uf if block_given? }
    else
      yield uformats if block_given?
    end
  else
    puts "No #{type}s found in this document."
  end
end

def input
  ARGV.first ? ARGV.first : STDIN.read
end

if options.empty?
  uformat_counts(Prism.find(input)).each {|count| puts count }
else
  if options[:atom]
    parse_microformats(input, :hatom) {|hatom| puts hatom.to_atom }
  elsif options[:vcard]
    parse_microformats(input, :hcard) {|hcard| puts hcard.to_vcard }
  elsif options[:xfn]
    parse_microformats(input, :xfn) {|xfn| puts xfn.url }
  end
end
